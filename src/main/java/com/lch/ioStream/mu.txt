# 1. ????????
??????????????????????????д???????????????ξ???????
????????????е????????
????????????????????????????????·????

# 2. ?????????
1. ????????????
2. ?????????CPU?????????
3. ??????????

# 3. ?????????

## 3.1 ???????????1?? ???Thread??

1. ????????????Tread???????
2. ??дThread???run( )
3. ????Thread???????????
4. ???????????start( )
	1. ??????????
	2. ?????????? run( ) ????
	3. ?????????? strat( )

```java
class MyThread extends Thread{
    @Override
    public void run() {
        System.out.println("????MyThread");
    }
}
public class ThreadTest {

    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        t1.start();
    }
}
```

???Thread????????????????
```java
new Thread(() -> {
    for (int i = 1; i <= 100; i += 2) {
        System.out.println(Thread.currentThread().getName() + ":" + i);
    }
}).start();
```

## 3.2 ???????????2?? ???Runnable??????
1. ????????????Runna??????
2. ?????????Runable?е???????run( )
3. ?????????????
4. ???????????????????Thread?????????У?????Thread??????
5. ???Thread?????????start( )

```java
class AThread implements Runnable{

    @Override
    public void run() {
        System.out.println("???????Runnable?????");
    }
}
public class ThreadTest3 {
    public static void main(String[] args) {
        AThread aThread = new AThread();
        //???????run() -> ??????Runnable?????target??run()????
        new Thread(aThread).start();
    }
}
```

??????????Runnable????????
1. ??е????????????
2. ????????????????????????

## 3.4 ???????????3??JDK5???? ???Callable???
1. ??????????Callable???????
2. ???call??????????????????е??????????call( ) ??
3. ????callable????????????
4. ????callable??????????????FutureTask???????У?????FutureTask?????
5. ??FutureTask?????????????????Thread?????????У?????Tread?????????start( ) ??????
6. ???Callable??call??????????

```java
class NumThread implements Callable{

    //2. ???call??????????????????е??????????call( ) ??
    @Override
    public Object call() throws Exception {
        int sum = 0;
        for (int i = 0; i < 100; i++) {
            sum += i;
            System.out.println(sum);
        }
        return sum;
    }
}
public class CallableTest {
    public static void main(String[] args) {

        //3. ????callable????????????
        NumThread numThread = new NumThread();
        //4. ????callable??????????????FutureTask???????У?????FutureTask?????
        FutureTask futureTask = new FutureTask<>(numThread);
        //5. ??FutureTask?????????????????Thread?????????У?????Tread?????????start( ) ??????
        new Thread(futureTask).start();
        try {
            //get ???????????FutureTask??????????callable???????д??call()??????
            Object o = futureTask.get();
            System.out.println(Thread.currentThread().getName() + "  sum:"+ o);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        }
    }
}
```

Callable??Runnable????
1. call?????????з????
2. call????????????????????????????????????
3. Callable??????

## 3.5 ???????????4??JDK5???? ????

???????????????????????????????????????粢???????????????????????
?·??????????????????????????У?????????????????????С?????????????????????????????á?

?????
1. ????????????????????????????
2. ????????????????????????????????????ζ???????
3. ??????????

corePoolSize?????????С
maximumPoolSize??????????
keepAliveTime???????????????????????????

```java
class NumThread implements Runnable{
    @Override
    public void run() {
        for (int i = 0; i < 100; i++) {
            System.out.println(Thread.currentThread().getName() + "----" + i);
        }
    }
}
public class ThreadPool {
    public static void main(String[] args) {
        //??????????????????
        ExecutorService executorService = Executors.newFixedThreadPool(10);
        //?????????????
        ThreadPoolExecutor service1 = (ThreadPoolExecutor) executorService;
//        service1.setCorePoolSize(15);

        // ??????Runnable?????
        executorService.submit(new NumThread());
        // ??????Callable
//        executorService.execute();
        //????????
        executorService.shutdown();
    }
}
```


# 4. Thread ???÷???

1. **start( )** : ?????????????????????run( )
2. **run( )** : ????????дThread???е?????????????????????е????????????????
3. **currentThread( )** : ?????????????????д???????
4. **getName( )** : ??????????????
5. **setName( )** : ??????????????
6.  **yield( )** : ?????cpu??????
7.  **join( )** : ?????A?е??????B?? join( ), ??????A???????????????????B??????????????A???????????
8. **stop( )** : ???????????????????
9. **sleep(long millitime)** : ???????????????millitime ?????????millitime????????????????????????
10. isAlive( ) : ?ж?????????

# 5. ?????????

MAX_PRIORITY: 10
MIN_PRIORITY: 1
NORN_PRIORITY: 5

??????????????????:
**getPriority( )**
**setPriority( )**

# 6. ????????????
![[????????????.png]]

1. ??????????Thread?????????????????????????????????????????????
2. ????????????????????? **start( )** ????????????е??CPU?????????????????????е???????????????CPU???
3. ???У?????????????????????CPU???????????????????**run( )** ??????????????????????
4. ??????????????????????????????????????????????????ó?CPU???????????????У???????????
5. ?????????????????????????????????????????????????????????


# 7. ??????

Q??????????е??????????????????????????????????????????????


## 7.1 ?????????????????
```java
synchronized(?????????){
	//?????????????
}
?????????????????????????????????????
???????????????????????????
```

```java
synchronized (this) {
    if (ticketCount > 0) {
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        System.out.println(Thread.currentThread().getName() + "??????" + ticketCount);
        ticketCount--;
    } else {
        break;
    }
}
```
?????
1. ????????????????????????????????
2. ???????????????????????????
3. ????????????????????κ???????????????????
	????????????????????
4. ?????Runnable???????????????У????????this???????????

???????????????????????????????????????????????????????????????Ч????

## 7.2 ?????????????????
???????????????????????????????????????У??????????????????
1. ???????????????????????????????
2. ????????????????????????? this
	?????????????????????????????
```java
private synchronized void show() {  // ??????????? .class ?????

    if (ticketCount > 0) {
        try {
            Thread.sleep(50);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        System.out.println(Thread.currentThread().getName() + "??????" + ticketCount);
        ticketCount--;
    }

}
```

## 7.3 ??????????Lock??????
ReentrantLock???Lock
```java
private int count = 100;

    //?????lock
    private ReentrantLock lock = new ReentrantLock(true);

    @Override
    public void run() {
        while (true) {
            try {
                //????????????lock()
                lock.lock();
                if (count > 0) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println(Thread.currentThread().getName() + "???" + count);
                    count--;
                }else {
                    break;
                }
            } finally {
                //????unlock()
                lock.unlock();
            }
        }
    }
}

public class LockTest {
    public static void main(String[] args) {
        Window window1 = new Window();
        Window window2 = new Window();
        Window window3 = new Window();
        new Thread(window1).start();
        new Thread(window2).start();
        new Thread(window3).start();
    }
```

## 7.4 synchronized ?? lock ?????
???????????????????????
?????synchronized ?????????????????????????????????????????
lock?????????????????????????????



# 8. ????
??????????????????????????????????????????????????????????????????γ?????????????
1. ??????????????????????????????????????е??????????????????????????
2. ?????????????????????
```java
public static void main(String[] args) {

    StringBuffer sb1 = new StringBuffer();
    StringBuffer sb2 = new StringBuffer();
    new Thread(() -> {
        synchronized (sb1) {
            sb1.append("a");
            sb2.append("1");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            synchronized (sb2) {
                sb1.append("b");
                sb2.append("2");
                System.out.println(sb1);
                System.out.println(sb2);
            }
        }

    }).start();

    new Thread(() -> {
        synchronized (sb2) {
            sb1.append("c");
            sb2.append("3");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }

            synchronized (sb1) {
                sb1.append("d");
                sb2.append("4");
                System.out.println(sb1);
                System.out.println(sb2);
            }
        }
    }).start();
}
```

# 9. ??????
????????
**wait( )** : ?????????????????????????????????
**notify( )**  ???????wait????????????ж???????????????
**notifyAll( )** ?????????б?wait????? ??

1. ???????????????????????????????е???
2. ??????????????????????????????????????

```java
synchronized (this) {
    //???????
    notify();
    if (num <= 100) {
        try {
            Thread.sleep(10);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(Thread.currentThread().getName() + "------"+ num);
        num++;
        try {
            //????????????
            wait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    } else {
        break;
    }
}
```
sleep( ) ?? wait( ) ?????
??? ??з????????????????????
?? 1. ??????λ?ò????sleep( ) ?? Thread?????????wait( ) ??Object??????????
	    2. ??????Χ?????sleep( ) ???????κ?????????????wait( ) ????????????????????????
	    3. ???????????????????У?sleep( )???????????wait( ) ???????